<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Git</title>
      <link href="/2020/08/21/git/"/>
      <url>/2020/08/21/git/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><h2 id="Git-环境配置"><a href="#Git-环境配置" class="headerlink" title="Git 环境配置"></a>Git 环境配置</h2><blockquote><p>Git 环境配置</p></blockquote><ol><li>查看配置 git config -l</li><li>查看系统配置 git config –system –list || Git etc 目录下 gitconfig 一样的配置</li><li>查看当前用户自我全局配置 git config –global –list || 用户 目录下的.gitconfig 一样的配置</li><li>配置个人用户以及邮箱 git config –global user.name “zhufanzhi”||git config –global user.email “<a href="mailto:xxxxx@qq.com">xxxxx@qq.com</a>“</li></ol><h2 id="基本的-Linux-命令学习"><a href="#基本的-Linux-命令学习" class="headerlink" title="基本的 Linux 命令学习"></a>基本的 Linux 命令学习</h2><blockquote><p>基本的 Linux 命令学习</p></blockquote><ol><li><p>cd ：改变目录。</p></li><li><p>cd..：回退到上一个目录，直接 cd 进入默认目录</p></li><li><p>pwd：显示当前所在的目录路径</p></li><li><p>ls (ll):都是列出当前目录所有文件，只不过两个 ll 列出的内容更加详细</p></li><li><p>touch:新建一个文件 如 touch index.js 就会在当前目录下新建一个 index.js 文件</p></li><li><p>rm:删除一个文件，rm index.js 就会把 index.js 问价按删除</p></li><li><p>mkdir:新建一个目录，就是新建一个文件夹</p></li><li><p>rm -r:删除一个文件夹，rm -r src 就会删除 src 目录</p><blockquote><p>rm -rf / 切勿在 linux 中尝试！会删除电脑中全部文件！</p></blockquote></li><li><p>mv 移动文件，mv index.html src index.html 就是我们要移动的文件，src 是目标文件，当然这样写必须保证文件和目标文件在同一目录下。</p></li><li><p>reset: 重新初始化终端/清屏</p></li><li><p>clear:清屏</p></li><li><p>history：查看命令历史</p></li><li><p>help 帮助</p></li><li><p>exit 退出</p></li><li><p>#表示注释</p></li></ol><h2 id="Git-常用命令"><a href="#Git-常用命令" class="headerlink" title="Git 常用命令"></a>Git 常用命令</h2><blockquote><p>最常用的六个命令</p></blockquote><p><img src="https://tc.qbn6.top/git1.png" alt="代码示例"></p><p>初始化项目: git init</p><p>克隆文件：git clone +地址</p><p>查看指定文件状态：git status [filename]</p><p>查看所有文件状态：git status</p><p>添加所有文件到暂存区 git add.</p><p>提交暂存区的内容到本地仓库 git commit -m 提交信息</p><blockquote><p>忽略文件</p></blockquote><p>有些时候我们不想把某些文件纳入版本控制中，比如数据库文件，零时文件，设计文件等</p><p>在主目录下建立“.gitignore”文件，此文件有如下规则:</p><ol><li>忽略文件中的空行或以#开始的行将会被忽略</li><li>可以使用 Linux 通配符。例如:星号*代表任意多个字符，问号？代表一个字符，方括号[]代表可选字符范围，大括号{}代表可选的字符串等。</li><li>如果名称最前面有！，表示例外规则，将不被忽略</li><li>如果名称最前面有一个路径分隔符/，表示要忽略的文件在此目录下，而子目录中的文件不忽略</li><li>如果名称最后面有一个路径分隔符/，表示要忽略的文件在此目录下的子目录，而非文件</li></ol><blockquote><p>#为注释</p><p>*.txt #忽略所有 .txt 结尾的文件，这样的话上传就不会被选中</p><p>!lib.txt #但 lib.txt 除外</p><p>/temp #仅忽略项目根目录下的 TODO 文件，不包括其他目录 temp</p><p>build/ #忽略 build/目录下的所有文件</p><p>doc/*.txt #会忽略 doc/notes.txt 但不包括 doc/server/arch.txt 即不会删除二级目录</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora</title>
      <link href="/2020/07/26/typora/"/>
      <url>/2020/07/26/typora/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h1><p>写 Mrakdown 费事？Typora 让你像写 Word 一样行云流水，所见即所得。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Typora 是一款轻便简洁的 Markdown 编辑器，支持即时渲染技术，这也是与其他 Markdown 编辑器最显著的区别。即时渲染使得你写 Markdown 就想是写 Word 文档一样流畅自如，不像其他编辑器的有编辑栏和显示栏。</p><ul><li>Typora 删除了预览窗口，以及所有其他不必要的干扰。取而代之的是实时预览。</li><li>Markdown 的语法因不同的解析器或编辑器而异，Typora 使用的是<a href="https://help.github.com/articles/basic-writing-and-formatting-syntax/">GitHub Flavored Markdown</a>。</li></ul><h2 id="Markdown-介绍"><a href="#Markdown-介绍" class="headerlink" title="Markdown 介绍"></a>Markdown 介绍</h2><p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。</p><p>Markdown 语言在 2004 由约翰·格鲁伯（英语：John Gruber）创建。</p><p>Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。</p><p>Markdown 编写的文档后缀为 <code>.md</code>, <code>.markdown</code>。</p><h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2><ul><li>加粗： <code>Ctrl + B</code></li><li>标题： <code>Ctrl + H</code></li><li>插入链接： <code>Ctrl + K</code></li><li>插入代码： <code>Ctrl + Shift + C</code> – 无法执行</li><li>行内代码： <code>Ctrl + Shift + K</code></li><li>插入图片： <code>Ctrl + Shift + I</code></li><li>无序列表：<code>Ctrl + Shift + L</code> – 无法执行</li><li>撤销： <code>Ctrl + Z</code></li><li>一级标题： <code>Ctrl + 1</code> – 以此类推</li></ul><pre><code>Typora快捷键整合```Ctrl+1  一阶标题    Ctrl+B  字体加粗Ctrl+2  二阶标题    Ctrl+I  字体倾斜Ctrl+3  三阶标题    Ctrl+U  下划线Ctrl+4  四阶标题    Ctrl+Home   返回Typora顶部Ctrl+5  五阶标题    Ctrl+End    返回Typora底部Ctrl+6  六阶标题    Ctrl+T  创建表格Ctrl+L  选中某句话   Ctrl+K  创建超链接Ctrl+D  选中某个单词  Ctrl+F  搜索Ctrl+E  选中相同格式的文字   Ctrl+H  搜索并替换Alt+Shift+5 删除线 Ctrl+Shift+I    插入图片Ctrl+Shift+M    公式块 Ctrl+Shift+Q    引用注：一些实体符号需要在实体符号之前加”\”才能够显示```</code></pre><h2 id="标题级别"><a href="#标题级别" class="headerlink" title="标题级别"></a>标题级别</h2><p># 一级标题 快捷键为 Ctrl + 1<br>## 二级标题 快捷键为 Ctrl + 2<br>……<br>###### 六级标题 快捷键为 Ctrl + 6</p><h2 id="引用文字"><a href="#引用文字" class="headerlink" title="引用文字"></a>引用文字</h2><p>&gt; + 空格 + 引用文字</p><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><p>使用 * + - 都可以创建一个无序列表</p><ul><li>AAA</li><li>BBB</li><li>CCC</li></ul><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><p>使用 1. 2. 3. 创建有序列表</p><ol><li>AAA</li><li>BBB</li><li>CCC</li></ol><h2 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a>任务列表</h2><p>\ -[ ] 不勾选<br>\ -[x] 勾选</p><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p>在 Typora 中插入程序代码的方式有两种：使用反引号 `（~ 键）、使用缩进（Tab）。</p><ul><li>插入行内代码，即插入一个单词或者一句代码的情况，使用 <code>code</code> 这样的形式插入。</li><li>插入多行代码输入 3 个反引号（`） + 回车，并在后面选择一个语言名称即可实现语法高亮。</li></ul><pre class=" language-c"><code class="language-c">  def <span class="token function">helloworld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"hello, world!"</span><span class="token punctuation">)</span></code></pre><h2 id="数学表达式"><a href="#数学表达式" class="headerlink" title="数学表达式"></a>数学表达式</h2><p>当你需要在编辑器中插入数学公式时，可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式来实现。根据需要加载 Mathjax 对数学公式进行渲染。</p><p>按下 <code>$$</code>，然后按下回车键，即可进行数学公式的编辑。</p><pre class=" language-c"><code class="language-c">$$\mathbf<span class="token punctuation">{</span>V<span class="token punctuation">}</span>_1\times\mathbf<span class="token punctuation">{</span>V<span class="token punctuation">}</span>_2 <span class="token operator">=</span> \mathbf<span class="token punctuation">{</span>X<span class="token punctuation">}</span>_3$$</code></pre><h2 id="插入表格"><a href="#插入表格" class="headerlink" title="插入表格"></a>插入表格</h2><p>输入 <code>| 表头1 | 表头2 |</code>并回车。即可创建一个包含 2 列表。快捷键 <code>Ctrl + T</code>弹出对话框。</p><table><thead><tr><th align="center">id</th><th align="center">number</th></tr></thead><tbody><tr><td align="center"></td><td align="center"></td></tr></tbody></table><ul><li>不管是哪种方式，第一行为表头，第二行为分割表头和主体部分，第三行开始每一行为一个表格行</li><li>列与列之间用管道符号<code>|</code> 隔开</li><li>还可设置对齐方式(表头与内容之间)，如果不使用对齐标记，内容默认左对齐，表头居中对齐<ul><li>左对齐 ：|</li><li>右对齐 |：</li><li>中对齐 ：|：</li></ul></li><li>为了美观，可以使用空格对齐不同行的单元格，并在左右两侧都使用 | 来标记单元格边界</li><li>为了使 Markdown 更清晰，| 和 - 两侧需要至少有一个空格（最左侧和最右侧的 | 外就不需要了）。</li></ul><h2 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h2><p>这个例子的脚注为[^1]</p><p>注意：该例子脚注标识是 1，脚注标识可以为字母数字下划线，但是暂不支持中文。脚注内容可为任意字符，包括中文。 []里+^+你需要的数字</p><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>输入 <code>***</code> 或者 <code>---</code> 再按回车即可绘制一条水平线，如下：</p><h2 id="目录-TOC"><a href="#目录-TOC" class="headerlink" title="目录(TOC)"></a>目录(TOC)</h2><p>输入 <code>[ toc ]</code> 然后回车，即可创建一个“目录”。TOC 从文档中提取所有标题，其内容将自动更新。</p><h2 id="跨度元素"><a href="#跨度元素" class="headerlink" title="跨度元素"></a>跨度元素</h2><p>跨度元素即图片，网址，视频等，在 Typora 中输入后，会立即载入并呈现。</p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><h3 id="内部链接"><a href="#内部链接" class="headerlink" title="内部链接"></a>内部链接</h3><p>这是一个带有标题属性的 <code>[链接](http://example.com/ "标题")</code><br>这是一个没有标题属性的 <code>[链接](http://example.net/)</code></p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p>这是一个[参考链接]id – 无法执行</p><h2 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h2><p>Typora 允许用&lt;括号括起来&gt;, 把 URL 作为链接插入。</p><p>Typora 还会自动链接标准网址。</p><p><a href="http://www.baidu.com">www.baidu.com</a></p><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><pre><code>![显示的文字](C:\Users\Hider\Desktop\echart.png "图片标题")![显示的文字](C:\Users\Hider\Desktop\echart.png)</code></pre><p>除了以上 2 种方式之外，还可以直接将图片拖拽进来，自动生成链接。</p><h2 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h2><p>使用 <code>*单个星号*</code> 或者 <code>_单下划线_</code> 可以字体倾斜。快捷键 <code>Ctrl + I</code></p><p><em>斜体</em></p><h2 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h2><p>使用 <code>**两个星号**</code> 或者 <code>__两个下划线__</code> 可以字体加粗。快捷键 <code>Ctrl + B</code></p><h2 id="加粗-1"><a href="#加粗-1" class="headerlink" title="加粗"></a><strong>加粗</strong></h2><h2 id="加粗斜体"><a href="#加粗斜体" class="headerlink" title="加粗斜体"></a>加粗斜体</h2><p>使用<code>***加粗斜体***</code>可以加粗斜体。</p><h2 id="加粗斜体-1"><a href="#加粗斜体-1" class="headerlink" title="加粗斜体"></a><strong><em>加粗斜体</em></strong></h2><h2 id="代码标记"><a href="#代码标记" class="headerlink" title="代码标记"></a>代码标记</h2><p>标记代码使用反引号，即在英文输入法下，ESC 键下面和 1 键左边的符号。</p><blockquote><p>使用该 <code>printf()</code>功能</p></blockquote><h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><p>使用<code>~~删除线~~</code> 快捷键 <code>Alt + Shift + 5</code></p><p>删除线</p><h2 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h2><p>\下划线 – 无法执行</p><p>参考另一篇文章，可执行。</p><p>通过<code>&lt;u&gt;下划线的内容&lt;/u&gt;</code> 或者 快捷键<code>Ctrl + U</code>可实现下划线</p><p>下划线的内容</p><h2 id="表情符号"><a href="#表情符号" class="headerlink" title="表情符号"></a>表情符号</h2><p>Github 的 Markdown 语法支持添加 emoji 表情，输入不同的符号码（两个冒号包围的字符）可以显示出不同的表情。</p><p>:smile – 无法显示</p><p>😺</p><h2 id="下标"><a href="#下标" class="headerlink" title="下标"></a>下标</h2><p>可以使用 <code>文本~文本~文本</code>实现下标。</p><p>(需在设置中打开该功能)</p><p>H<del>2</del>0</p><h2 id="上标"><a href="#上标" class="headerlink" title="上标"></a>上标</h2><p>可以使用<code>x^2^</code>实现上标。</p><p>(需在设置中打开该功能)</p><p>X^2^</p><p>Y^2^</p><h2 id="高亮"><a href="#高亮" class="headerlink" title="高亮"></a>高亮</h2><p><code>==高亮==</code>(需在设置中打开该功能)</p><p>我是最重要的</p><h2 id="文本居中"><a href="#文本居中" class="headerlink" title="文本居中"></a>文本居中</h2><p>使用 <code>&lt;center&gt;这是要居中的内容&lt;/center&gt;</code>可以使文本居中</p><p>这是要居中的文本内容</p><h2 id="换行符"><a href="#换行符" class="headerlink" title="换行符"></a>换行符</h2><p>使用 <code>空格 + 空格 + Enter</code>可以实现换行，例如：</p><p>或者可以使用<code>&lt;br/&gt;</code>实现换行。</p><h2 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h2><p>Markdown 使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown 使用反斜杠转义特殊字符：</p><h2 id="文本加粗"><a href="#文本加粗" class="headerlink" title="文本加粗"></a><strong>文本加粗</strong></h2><p>** 正常显示星号 **</p><p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p><pre class=" language-markdown"><code class="language-markdown">\ 反斜线` 反引号<span class="token list punctuation">-</span> 星号  \_ 下划线  {} 花括号  [] 方括号  () 小括号<span class="token title important"><span class="token punctuation">#</span> 井字号</span><span class="token list punctuation">-</span> 加号<span class="token list punctuation">*</span> 减号  . 英文句点  ! 感叹号</code></pre><p>HTML</p><p>支持 HTML</p><p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。</p><p>目前支持的 HTML 元素有：<code>&lt;kbd&gt; &lt;b&gt; &lt;i&gt; &lt;em&gt; &lt;sup&gt; &lt;sub&gt; &lt;br&gt;</code>等 ，如：</p><pre><code>使用 &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;Alt&lt;/kbd&gt;+&lt;kbd&gt;Del&lt;/kbd&gt; 重启电脑&lt;kbd&gt; &lt;/kbd&gt; -- 白色框框</code></pre><p>效果：<br>使用 Ctrl+Alt+Del 重启电脑</p><h2 id="嵌入内容"><a href="#嵌入内容" class="headerlink" title="嵌入内容"></a>嵌入内容</h2><h2 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h2><p>总结</p><ol><li>建议打开大纲视图<code>Ctrl + Shift + 1</code></li><li>插入表格需要顶格写，否则无法显示</li><li>语法无须刻意记忆，右键可查询</li></ol><blockquote><p>参考链接 1：<a href="https://www.simon96.online/2018/10/18/Typora入门（中文版）/">Typora 入门（中文版）</a></p><p>参考链接 2：<a href="https://www.jianshu.com/p/b7fd16a44508">Typora</a></p><p>参考链接 3：<a href="https://www.jianshu.com/p/65ab196bef04">Markdown 代码块与语法高亮</a></p><p>参考链接 4：<a href="https://www.cnblogs.com/anliux/p/10805103.html">Markdown 使用-表格及其居中等格式</a></p><p>参考链接 5：<a href="https://www.cnblogs.com/rossoneri/p/4446440.html">Markdown 语法小结</a></p><p>参考链接 6：<a href="https://www.runoob.com/markdown/md-tutorial.html">Runoob：Markdown 教程</a></p></blockquote><h4 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h4><blockquote><footer><strong>https://www.cnblogs.com/hider/p/11614688.html#fn1</strong></footer></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Typora </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> Typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>子串出现次数</title>
      <link href="/2020/07/26/zi-chuan-chu-xian-ci-shu/"/>
      <url>/2020/07/26/zi-chuan-chu-xian-ci-shu/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getCount</span><span class="token punctuation">(</span>String mainStr<span class="token punctuation">,</span> String subStr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> mainLength <span class="token operator">=</span> mainStr<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> subLength <span class="token operator">=</span> subStr<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mainLength <span class="token operator">>=</span> subLength<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// while ((index=mainStr.indexOf(subStr))!=-1){</span>            <span class="token comment" spellcheck="true">//     count++;</span>            <span class="token comment" spellcheck="true">//     mainStr=mainStr.substring(index+subStr.length());</span>            <span class="token comment" spellcheck="true">// }</span>            <span class="token comment" spellcheck="true">//优化</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>index <span class="token operator">=</span> mainStr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>subStr<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>                index <span class="token operator">+=</span> subLength<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> count<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span>  <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getCount2</span><span class="token punctuation">(</span>String str1<span class="token punctuation">,</span> String str2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> str1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                String subStr <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>subStr<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    count<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String mainStr <span class="token operator">=</span> <span class="token string">"abcabab"</span><span class="token punctuation">;</span>        String str<span class="token operator">=</span><span class="token string">"ab"</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token function">getCount</span><span class="token punctuation">(</span>mainStr<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count2 <span class="token operator">=</span> <span class="token function">getCount2</span><span class="token punctuation">(</span>mainStr<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两个字符串最大相同字串</title>
      <link href="/2020/06/26/zui-da-xiang-tong-zi-chuan/"/>
      <url>/2020/06/26/zui-da-xiang-tong-zi-chuan/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GetMaxString</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**自己的方法  应该从最大字串开始找 而不是最小字串开始这样有浪费     *     * @param s1     * @param s2     * @return     */</span>    <span class="token keyword">static</span>  String <span class="token function">getMaxStr</span><span class="token punctuation">(</span>String s1<span class="token punctuation">,</span>String s2<span class="token punctuation">)</span><span class="token punctuation">{</span>        String str<span class="token operator">=</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>=</span>s2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span>s2<span class="token operator">:</span>s1<span class="token punctuation">;</span>        <span class="token keyword">int</span> max<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        String key<span class="token operator">=</span><span class="token string">"-1"</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                String string<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>string<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span>max<span class="token punctuation">)</span><span class="token punctuation">{</span>                        max<span class="token operator">=</span>string<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        key<span class="token operator">=</span>string<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span>  key<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//优化从最大字串开始找</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> List <span class="token function">getMaxSameString</span><span class="token punctuation">(</span>String str1<span class="token punctuation">,</span> String str2<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>str1<span class="token operator">!=</span>null<span class="token operator">&amp;&amp;</span>str2<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            String maxStr <span class="token operator">=</span> <span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> str2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span> str1 <span class="token operator">:</span> str2<span class="token punctuation">;</span>            String minStr <span class="token operator">=</span> <span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span>  str2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span> str1 <span class="token operator">:</span> str2<span class="token punctuation">;</span>            <span class="token keyword">int</span> length <span class="token operator">=</span> minStr<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            List<span class="token operator">&lt;</span>String<span class="token operator">></span> list<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> y <span class="token operator">=</span> length <span class="token operator">-</span> i<span class="token punctuation">;</span> y <span class="token operator">&lt;=</span> length<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">,</span> y<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    String subStr <span class="token operator">=</span> minStr<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>maxStr<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>subStr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>subStr<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> list<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span>  null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String str1<span class="token operator">=</span><span class="token string">"avhellomnihao"</span><span class="token punctuation">;</span>        String str2<span class="token operator">=</span><span class="token string">"hellonihao"</span><span class="token punctuation">;</span>        List maxSameString <span class="token operator">=</span> <span class="token function">getMaxSameString</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> maxSameString<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>maxSameString<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云部署hexo</title>
      <link href="/2020/05/27/a-li-yun-bu-shu/"/>
      <url>/2020/05/27/a-li-yun-bu-shu/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在一番折腾下，终于把博客部署到阿里云。</p><h3 id="1-1-安装-git-以及配置仓库"><a href="#1-1-安装-git-以及配置仓库" class="headerlink" title="1.1 安装 git 以及配置仓库"></a>1.1 安装 git 以及配置仓库</h3><p>安装 git 以及新建 git 用户</p><pre><code>yum install gitadduser gitchmod 740 /etc/sudoersvi /etc/sudoers</code></pre><p>在如下位置添加</p><pre><code>git ALL=(ALL) ALL</code></pre><p>vi 指令执行之后按 i 进入输入模式，编辑完成之后按一下 esc，然后输入:wq 即可退出。<br><img src="https://tc.qbn6.top/aly1.png" alt="代码示例"><br>执行以下指令更改文件夹权限</p><pre><code>chmod 400 /etc/sudoerssudo passwd git</code></pre><p>切换 git 用户并且建立密钥</p><pre><code>su gitcd ~mkdir .sshcd .sshvi authorized_keyschmod 600 ~/.ssh/authorized_keyschmod 700 ~/.ssh</code></pre><p>创建 git 仓库</p><pre><code>cd ~git init --bare blog.gitvi ~/blog.git/hooks/post-receive</code></pre><p>输入</p><pre><code>git --work-tree=/home/www/website --git-dir=/home/git/blog.git checkout -f</code></pre><p>保存退出</p><pre><code>chmod +x ~/blog.git/hooks/post-receive</code></pre><p>*以上指令都需要在 su git 之后执行 如果中途断开重新连接过，需要重新执行 su git 指令 进入 git 账户。</p><p>新建/home/www/website 文件夹,在 root 用户下执行，所限先 su root 切换为 root 账户。</p><pre><code>su root输入密码cd /homemkdir wwwcd wwwmkdir website修改文件夹权限 这步很重要 视频中没有提及chmod 777 /home/www/websitechmod 777 /home/www</code></pre><p>在本地电脑输入</p><pre><code>ssh -v git@服务器的公网ip</code></pre><p>返回如下则成功<br><img src="https://tc.qbn6.top/aly2.png" alt="代码示例"><br>修改本地配置文件<br><img src="https://tc.qbn6.top/aly3.png" alt="代码示例"><br>repo: git@这里改为服务器公网 IP:/home/git/blog.git</p><h3 id="2-1-配置-Nginx"><a href="#2-1-配置-Nginx" class="headerlink" title="2.1 配置 Nginx"></a>2.1 配置 Nginx</h3><pre><code>此时ssh工具断开服务器重新连接，进入Linux账户</code></pre><p>这里选用宝塔面板来一键部署 Nginx，Linux 面板 6.0 安装命令(暂时仅兼容 Centos7.x，其它系统版本请安装 5.9 稳定版)：</p><pre><code>yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; bash install.sh</code></pre><p>Linux 面板 6.0 升级专业版</p><pre><code>curl http://download.bt.cn/install/update6.sh|bash</code></pre><p>安装完成后会显示面板后台地址·账号·密码。打开面板后台地址登陆面板，选择 Nginx 的部署方案，静静等待部署。<br>部署完成，点击网站-添加站点-输入域名(没有域名的输入自己的 IP 地址)-底部的 PHP 版本选择”纯静态”(其他不改<br>或者根据自己的习惯来改)-提交。<br>网站创建完成后点击设置-配置文件</p><pre><code>server{    listen 80;    # server_name 填写自己的域名(若没有可不填)    server_name ali6.cn blog.ali6.cn;    index index.php index.html index.htm default.php default.htm default.html;    # 这里root填写自己的网站根目录，修改为/home/www/website    root /home/www/website;</code></pre><p>至此，服务器端的部署已经全部完成</p><p>下面开始测试部署</p><p>本地 git 执行如下命令</p><pre><code>hexo cleanhexo g -d</code></pre><br><br><br><br><br><h4 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h4><blockquote><footer><strong>https://lneverl.gitee.io/posts/2092ec56.html</strong></footer></blockquote><blockquote><footer><strong>https://yq.aliyun.com/articles/702417</strong></footer></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 阿里云篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 阿里云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串反转三种方式</title>
      <link href="/2020/05/26/zi-fu-chuan-fan-zhuan-san-chong-fang-shi/"/>
      <url>/2020/05/26/zi-fu-chuan-fan-zhuan-san-chong-fang-shi/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringDemo</span> <span class="token punctuation">{</span><span class="token operator">/</span>_将一个字符串进行反转。将字符串中指定部分进行反转。比如“abcdefg”反转为“abfedcg”。_<span class="token operator">/</span>    <span class="token comment" spellcheck="true">//方式一：转换为char[]</span>    <span class="token keyword">public</span> String <span class="token function">reverse</span><span class="token punctuation">(</span>String str<span class="token punctuation">,</span> <span class="token keyword">int</span> startIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> endIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> startIndex<span class="token punctuation">,</span> y <span class="token operator">=</span> endIndex<span class="token punctuation">;</span> x <span class="token operator">&lt;</span> y<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">,</span> y<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">char</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//方式二:使用String的拼接</span>    <span class="token keyword">public</span> String <span class="token function">reverse1</span><span class="token punctuation">(</span>String str<span class="token punctuation">,</span> <span class="token keyword">int</span> startIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> endIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//第一部分</span>            String reverseStr<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>startIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//第二部分</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>endIndex<span class="token punctuation">;</span>i<span class="token operator">>=</span>startIndex<span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                reverseStr<span class="token operator">+=</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//第三部分</span>            reverseStr<span class="token operator">+=</span>str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>endIndex<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> reverseStr<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//方式三：使用StringBuffer/StringBuilder替换String</span>    <span class="token keyword">public</span> String <span class="token function">reverse2</span><span class="token punctuation">(</span>String str<span class="token punctuation">,</span> <span class="token keyword">int</span> startIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> endIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            StringBuilder builder<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//第一部分</span>            builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>startIndex<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//第二部分</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>endIndex<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>startIndex<span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//第三部分</span>            builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>endIndex<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testReverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        String str<span class="token operator">=</span><span class="token string">"abcdefg"</span><span class="token punctuation">;</span>        String reverse<span class="token operator">=</span><span class="token function">reverse</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>reverse<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java网红面试题</title>
      <link href="/2020/05/26/java-wang-hong-mian-shi-ti/"/>
      <url>/2020/05/26/java-wang-hong-mian-shi-ti/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Java-网红题"><a href="#Java-网红题" class="headerlink" title="Java 网红题"></a>Java 网红题</h3><p><img src="https://tc.qbn6.top/wh.png" alt="wh"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//打印a=100,b=200</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token function">method</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a="</span><span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//100</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"b="</span><span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//200</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//方法一</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a=100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"b=200"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>方法二<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    PrintStream ps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">println</span><span class="token punctuation">(</span>String x<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"a=10"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                x <span class="token operator">=</span> <span class="token string">"a=100"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"b=10"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                x <span class="token operator">=</span> <span class="token string">"b=200"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span><span class="token function">setOut</span><span class="token punctuation">(</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>可变形参方法</title>
      <link href="/2020/05/26/ke-bian-xing-can-fang-fa/"/>
      <url>/2020/05/26/ke-bian-xing-can-fang-fa/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="可变个数形参方法"><a href="#可变个数形参方法" class="headerlink" title="可变个数形参方法"></a>可变个数形参方法</h3><h4 id="1-jdk5-0-新增内容"><a href="#1-jdk5-0-新增内容" class="headerlink" title="1. jdk5.0 新增内容"></a>1. jdk5.0 新增内容</h4><h4 id="2-具体使用"><a href="#2-具体使用" class="headerlink" title="2.具体使用"></a>2.具体使用</h4><pre><code>   1. 可变参数的格式，数据类型 ...  变量名   2. 当调用可变个数形参的方法时，传入的参数个数可以是，0个，1个，2个......   3. 可变个数形参的方法与本类中方法名相同，形参不同的方法之间构成重载   4. 可变个数形参的方法与本类中方法名相同，形参类型也相同的数组之间不构成重载，换句话说，二者不能共同出现   5. 可变个数形参在方法形参中，必须声明在末尾   6. 可变个数形参在方法形参中，最多只能声明一个可变形参</code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span>  <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span>String <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> str<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Test<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Test<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token string">"第一个"</span><span class="token punctuation">,</span><span class="token string">"第二个"</span><span class="token punctuation">,</span><span class="token string">"第三个"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Test<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token string">"第一个"</span><span class="token punctuation">,</span><span class="token string">"第二个"</span><span class="token punctuation">,</span><span class="token string">"..."</span><span class="token punctuation">,</span><span class="token string">"第n个"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="3-实现："><a href="#3-实现：" class="headerlink" title="3.实现："></a>3.实现：</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//可变个数形参方法</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum <span class="token operator">+=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"可变个数形参的方法\t"</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//一个重载方法实现安</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"重载的方法\t"</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>4.控制台输出：</p><p>可变个数形参的方法 15<br>重载的方法 1</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>求质数</title>
      <link href="/2020/05/26/qiu-zhi-shu/"/>
      <url>/2020/05/26/qiu-zhi-shu/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h5 id="我是六六啊"><a href="#我是六六啊" class="headerlink" title="我是六六啊"></a>我是六六啊</h5><h1 id="Java求100以内的质数的四种方法"><a href="#Java求100以内的质数的四种方法" class="headerlink" title="Java求100以内的质数的四种方法"></a>Java求100以内的质数的四种方法</h1><h2 id="质数："><a href="#质数：" class="headerlink" title="质数："></a>质数：</h2><ul><li>又称素数，只能被1和它本身整除的数就是质数。</li></ul><h2 id="难点"><a href="#难点" class="headerlink" title="难点:"></a>难点:</h2><ul><li>需要两层循环，外层循环99遍；</li><li>内层循环，控制除数为2到98（也就是2到被除数前面的一个数）。</li><li>为什么从2开始？因为所有数都能被1整除。</li><li>需要定义一个变量flag来记录某个数是不是质数</li><li>内层循环结束后需要重新把flag重置为true</li></ul><h2 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//为什么要定义变量flag？</span>            <span class="token comment" spellcheck="true">//因为只能被1和它本身整除的才是质数，而如果if的判断条件为true</span>            <span class="token comment" spellcheck="true">//则这个数不是质数。因为进入if判断条件，意味着这个数能被2到i-1的某个数整除</span>            flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//因为内层循环会把flag的值设置为false</span>    <span class="token comment" spellcheck="true">//如果没有下面的语句，flag的值在进入内层循环之后将永远为false</span>    flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h2><p>与方法一相比有所改进的地方，把flag放在外层与内层循环之间，这样就不用每次结束内层循环后去重置flag的值。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//因为flag定义在外层循环与内层循环之间，所以每次开始外层循环时flag的值都是true</span>    <span class="token comment" spellcheck="true">//这样就不需要在内层循环结束时重置flag的值为true了</span>    <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//为什么要定义变量flag？</span>            <span class="token comment" spellcheck="true">//因为只能被1和它本身整除的才是质数，而如果if的判断条件为true</span>            <span class="token comment" spellcheck="true">//则这个数不是质数。因为进入if判断条件，意味着这个数能被2到i-1的某个数整除</span>            flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="方法三："><a href="#方法三：" class="headerlink" title="方法三："></a>方法三：</h2><p>改进：在if判断语句后面加了break，因为只要有能被2到i-1当中的一个数整除，这个i就不是质数，就没有必要继续循环下去</p><pre class=" language-java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span>i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这是改进的地方，因为只要有能被2到i-1当中的一个数整除，这个i就不是质数，就没有必要继续循环下去</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="方法四："><a href="#方法四：" class="headerlink" title="方法四："></a>方法四：</h2><p>改进：把j的取值范围由&lt;i,改为&lt;=Math.sqrt(i)</p><pre class=" language-java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="结果："><a href="#结果：" class="headerlink" title="结果："></a>结果：</h2><p>均为：2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97 </p><h4 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h4><blockquote><footer><strong>https://www.cnblogs.com/majestyking/p/12400606.html</strong></footer></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 求质数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷P1014  Cantor 表</title>
      <link href="/2020/05/26/luo-gu-p1014/"/>
      <url>/2020/05/26/luo-gu-p1014/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Java-实现-洛谷P1014-Cantor-表"><a href="#Java-实现-洛谷P1014-Cantor-表" class="headerlink" title="Java 实现 洛谷P1014 Cantor 表"></a>Java 实现 洛谷P1014 Cantor 表</h2><p>题目描述<br>现代数学的著名证明之一是Georg Cantor证明了有理数是可枚举的。他是用下面这一张表来证明这一命题的：</p><p>1/1 1/2 1/3 1/4 1/5 …</p><p>2/1 2/2 2/3 2/4 …</p><p>3/1 3/2 3/3 …</p><p>4/1 4/2 …</p><p>5/1 …</p><p>… 我们以Z字形给上表的每一项编号。第一项是1/1，然后是1/2，2/1，3/1，2/2，…</p><p>输入输出格式<br>输入格式：<br>整数N（1≤N≤10000000）</p><p>输出格式：<br>表中的第N项</p><p>输入输出样例<br>输入样例#1：<br>7<br>输出样例#1：<br>1/4</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>LuoGu<span class="token punctuation">.</span>Day01<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">P1014</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Scanner cin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> cin<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> n<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//有理数个数递增为1，2，3，....；因此可以算出要求的第几个有理数在第几行</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            n <span class="token operator">-=</span> i<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                h <span class="token operator">=</span> i<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//同理  求出第几行里的第几个</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> h<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            l <span class="token operator">-=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//参照偶数和奇数行不同的规律  之前算出的行列就用上了</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>l <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>h <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">-</span> l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span>h <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">-</span> l<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> l<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>暴力枚举</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 洛谷 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
            <tag> 暴力枚举 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法</title>
      <link href="/2020/05/26/suan-fa/"/>
      <url>/2020/05/26/suan-fa/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h5 id="我是六六啊"><a href="#我是六六啊" class="headerlink" title="我是六六啊"></a>我是六六啊</h5><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 递归 </tag>
            
            <tag> DFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java学习路线</title>
      <link href="/2020/05/24/java-xue-xi-lu-xian/"/>
      <url>/2020/05/24/java-xue-xi-lu-xian/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Java学习路线"><a href="#Java学习路线" class="headerlink" title="Java学习路线"></a>Java学习路线</h2><h3 id="阶段1"><a href="#阶段1" class="headerlink" title="阶段1"></a>阶段1</h3><ol><li>学习HTML   </li><li>学习CSS  </li><li>Javascript  </li><li>jquery  </li><li>xml解析  </li><li>Bootstrap   </li></ol><h3 id="阶段2"><a href="#阶段2" class="headerlink" title="阶段2"></a>阶段2</h3><ol><li>JavaSE基础   </li><li>mysql数据库   </li><li>Powerdesigner  </li><li>JDBC  </li><li>JAVAWEB    </li></ol><h3 id="阶段3"><a href="#阶段3" class="headerlink" title="阶段3"></a>阶段3</h3><ol><li>oracle</li><li>struts2</li><li>Hibernate</li><li>Spring</li></ol><h3 id="阶段4"><a href="#阶段4" class="headerlink" title="阶段4"></a>阶段4</h3><ol><li>Maven</li><li>SpringMVC</li><li>MyBatis</li></ol><p><img src="https://tc.qbn6.top/java0.png" alt="代码示例"><br><img src="https://tc.qbn6.top/java1.png" alt="代码示例"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 技术路线类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 路线 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你所知道滴Vuex用法</title>
      <link href="/2020/05/24/vue/"/>
      <url>/2020/05/24/vue/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="阿达s"><a href="#阿达s" class="headerlink" title="阿达s"></a>阿达s</h4><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 基础类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java_\n\r区分</title>
      <link href="/2019/10/14/java-ji-chu/"/>
      <url>/2019/10/14/java-ji-chu/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="r-与-n-的区别："><a href="#r-与-n-的区别：" class="headerlink" title="\r 与\n 的区别："></a>\r 与\n 的区别：</h2><h1 id="r-n-的区别以及对应的-ascii-码"><a href="#r-n-的区别以及对应的-ascii-码" class="headerlink" title="\r\n 的区别以及对应的 ascii 码"></a>\r\n 的区别以及对应的 ascii 码</h1><p>\r:回车，ASCII 码 13 　 r-&gt;return</p><p>\n:换行，ASCII 码 10 　　　 n-&gt;newline</p><p>在 Windows 中：</p><p>‘\r’ 回车，回到当前行的行首，而不会换到下一行；</p><p>‘\n’ 换行，换到当前位置的下一行，而不会回到行首；</p><p>[\r 与\n 的区别]：</p><p>\r ： return 到当前行的最左边。</p><p>\n： newline 向下移动一行，并不移动左右。</p><p>Linux 中\n 表示回车+换行；</p><p>Windows 中\r\n 表示回车+换行。</p><p>Mac 中\r 表示回车+换行。</p><h2 id="历史："><a href="#历史：" class="headerlink" title="历史："></a>历史：</h2><p>回车”（Carriage Return）和“换行”（Line Feed）这两个概念的来历和区别。<br>在计算机还没有出现之 前，有一种叫做电传打字机（Teletype Model 33，Linux/Unix 下的 tty 概念也来自于此）的玩意，每秒钟可以打 10 个字符。但是它有一个问题，就是打完一行换行的时候，要用去 0.2 秒，正 好可以打两个字符。要是在这 0.2 秒里面，又有新的字符传过来，那么这个字符将丢失。<br>于是，研制人员想了个办法解决这个问题，就是在每行后面加两个表示结束的字符。一个叫做“回车(return)”，告诉打字机把打印头定位在左边界；另一个叫做“换行(newline)”，告诉打字机把纸向下移一行。这就是“换行”和“回车”的来历，从它们的英语名字上也可以看出一二。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义异常类</title>
      <link href="/2019/10/09/zi-ding-yi-yi-chang-lei/"/>
      <url>/2019/10/09/zi-ding-yi-yi-chang-lei/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Java自定义异常"><a href="#Java自定义异常" class="headerlink" title="Java自定义异常"></a>Java自定义异常</h1><h2 id="建造异常类"><a href="#建造异常类" class="headerlink" title="建造异常类"></a>建造异常类</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>demo<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyException</span>  <span class="token keyword">extends</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span>  String sex<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//传递参数性别</span>    <span class="token comment" spellcheck="true">//自定义异常方法</span>    <span class="token keyword">public</span> <span class="token function">MyException</span><span class="token punctuation">(</span>String a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sex<span class="token operator">=</span>a<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"MyException{"</span> <span class="token operator">+</span>                <span class="token string">"sex='"</span> <span class="token operator">+</span> sex <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="异常类测试"><a href="#异常类测试" class="headerlink" title="异常类测试"></a>异常类测试</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>demo<span class="token punctuation">.</span>MyException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span>String a<span class="token punctuation">)</span> <span class="token keyword">throws</span> MyException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"传递的参数为:"</span><span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>a<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span>  <span class="token keyword">new</span> <span class="token class-name">MyException</span><span class="token punctuation">(</span><span class="token string">"传递错误：性别必须是男或者女"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"性别是对的"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"男55"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MyException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"设置性别出错：\n"</span><span class="token operator">+</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java异常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 异常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>冒泡排序</title>
      <link href="/2019/09/29/mou-pao-pai-xu/"/>
      <url>/2019/09/29/mou-pao-pai-xu/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><h3 id="冒泡排序算法的原理如下"><a href="#冒泡排序算法的原理如下" class="headerlink" title="冒泡排序算法的原理如下"></a>冒泡排序算法的原理如下</h3><ol><li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li><li>对每一对相邻元素做同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。</li><li>针对所有的元素重复以上的步骤，除了最后一个。</li><li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>project<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> null <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">int</span> t <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    arr<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">bubbleSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 算法类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java_多线程</title>
      <link href="/2019/05/26/java-duo-xian-cheng/"/>
      <url>/2019/05/26/java-duo-xian-cheng/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>##</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaSE基础</title>
      <link href="/2018/08/31/javase-ji-chu/"/>
      <url>/2018/08/31/javase-ji-chu/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Write-Once、Run-Anywhere"><a href="#Write-Once、Run-Anywhere" class="headerlink" title="Write Once、Run Anywhere"></a>Write Once、Run Anywhere</h1><h2 id="Java-三大版本："><a href="#Java-三大版本：" class="headerlink" title="Java 三大版本："></a>Java 三大版本：</h2><ol><li>JavaSE:标准版(桌面程序，控制台开发…)</li><li>JavaME:嵌入式开发(手机，小家电….)</li><li>JavaEE:E 企业级开发(web 端，服务器开发)</li></ol><h2 id="JDK、JRE、JVM："><a href="#JDK、JRE、JVM：" class="headerlink" title="JDK、JRE、JVM："></a>JDK、JRE、JVM：</h2><ul><li>JDK: Java Development Kit （Java 开发者工具）</li><li>JRE: Java Runtime Environment （Java 运行环境）</li><li>JVM： Java Virtual Machine （Java 虚拟机）</li></ul><h2 id="安装开发环境："><a href="#安装开发环境：" class="headerlink" title="安装开发环境："></a>安装开发环境：</h2><p>卸载 JDK: 打开&gt;我的电脑属性&gt;高级系统设置&gt;环境变量</p><p>JDK 下载与安装</p><ol><li><p>浏览器百度 JDK8，找到下载地址</p></li><li><p>下载对应电脑版本</p></li><li><p>双击安装 JDK</p></li><li><p>记住安装路径</p></li><li><p>配置环境变量</p><ol><li>我的电脑&gt;属性</li><li>环境变量&gt;新建 JAVA_HOME</li><li>配置 path 变量 系统变量&gt;path&gt;新建%JAVA_HOME%\bin 、%JAVA_HOME%\jre\bin</li></ol></li><li><p>检查是否安装成功 cmd&gt;java –version</p></li><li><p>出现 java version “1.8.0_xxx” 以及 Java TM SE Environment …字样即表示安装成功</p></li></ol><h2 id="第一个输出代码：HellWorld"><a href="#第一个输出代码：HellWorld" class="headerlink" title="第一个输出代码：HellWorld"></a>第一个输出代码：HellWorld</h2><ol><li><p>随便新建一个文件夹，存放代码</p></li><li><p>新建一个 java 文件</p><ul><li><p>文件后缀名为.java</p></li><li><p>Hello.java</p><p>3.编写代码</p></li></ul></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String <span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Hello,World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="4"><li>编译 javac java 文件，会生成 class 文件</li><li>运行 class 文件，java class 文件</li></ol><h2 id="重点去了解-Java-程序运行机制"><a href="#重点去了解-Java-程序运行机制" class="headerlink" title="重点去了解 Java 程序运行机制"></a>重点去了解 Java 程序运行机制</h2><ul><li>编译型</li><li>解释型</li></ul><h2 id="Java-基础-01-注释"><a href="#Java-基础-01-注释" class="headerlink" title="Java 基础 01_注释"></a>Java 基础 01_注释</h2><blockquote><p>注释不会被执行，书写注释是程序员非常好的一个习惯</p></blockquote><ol><li><p>单行注释 // 这就是单行注释 不会被执行</p></li><li><p>多行注释 /_这就是多行注释 _/</p></li><li><p>文档注释</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @Author 小六 * @Description //TODO * @Date 15:38 2018/8/25 * @Param * @return **/</span></code></pre></li></ol><h2 id="Java-基础-02-标识符和关键字"><a href="#Java-基础-02-标识符和关键字" class="headerlink" title="Java 基础 02_标识符和关键字"></a>Java 基础 02_标识符和关键字</h2><blockquote><p>关键字</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">abstract</span><span class="token operator">:</span>表明类或者成员方法具有抽象属性<span class="token keyword">assert</span><span class="token operator">:</span>用来进行程序调试<span class="token keyword">boolean</span><span class="token operator">:</span>基本数据类型之一，布尔类型<span class="token keyword">break</span><span class="token operator">:</span>提前跳出一个块<span class="token keyword">byte</span><span class="token operator">:</span>基本数据类型之一，字节类型<span class="token keyword">case</span><span class="token operator">:</span>用在<span class="token keyword">switch</span>语句之中，表示其中的一个分支<span class="token keyword">catch</span><span class="token operator">:</span>用在异常处理中，用来捕捉异常<span class="token keyword">char</span><span class="token operator">:</span>基本数据类型之一，字符类型<span class="token keyword">class</span><span class="token operator">:</span>类<span class="token keyword">const</span><span class="token operator">:</span>保留关键字，没有具体含义<span class="token keyword">continue</span><span class="token operator">:</span>回到一个块的开始处<span class="token keyword">default</span><span class="token operator">:</span>默认，例如，用在<span class="token keyword">switch</span>语句中，表明一个默认的分支<span class="token keyword">do</span><span class="token operator">:</span>用在<span class="token keyword">do</span><span class="token operator">-</span><span class="token keyword">while</span>循环结构中<span class="token keyword">double</span><span class="token operator">:</span>基本数据类型之一，双精度浮点数类型<span class="token keyword">else</span><span class="token operator">:</span>用在条件语句中，表明当条件不成立时的分支<span class="token keyword">enum</span><span class="token operator">:</span>枚举<span class="token keyword">extends</span><span class="token operator">:</span>表明一个类型是另一个类型的子类型，这里常见的类型有类和接口fina<span class="token operator">:</span>l用来说明最终属性，表明一个类不能派生出子类，或者成员方法不能被覆盖，或者成员域的值不能被改变，用来定义常量<span class="token keyword">finally</span><span class="token operator">:</span>用于处理异常情况，用来声明一个基本肯定会被执行到的语句块<span class="token keyword">float</span><span class="token operator">:</span>基本数据类型之一，单精度浮点数类型<span class="token keyword">for</span><span class="token operator">:</span>一种循环结构的引导词<span class="token keyword">goto</span><span class="token operator">:</span>保留关键字，没有具体含义<span class="token keyword">if</span><span class="token operator">:</span>条件语句的引导词<span class="token keyword">implements</span><span class="token operator">:</span>表明一个类实现了给定的接口<span class="token keyword">import</span><span class="token operator">:</span>表明要访问指定的类或包<span class="token keyword">instanceof</span><span class="token operator">:</span>用来测试一个对象是否是指定类型的实例对象<span class="token keyword">int</span><span class="token operator">:</span>基本数据类型之一，整数类型<span class="token keyword">interface</span><span class="token operator">:</span>接口<span class="token keyword">long</span><span class="token operator">:</span>基本数据类型之一，长整数类型<span class="token keyword">native</span><span class="token operator">:</span>用来声明一个方法是由与计算机相关的语言（如C<span class="token operator">/</span>C<span class="token operator">++</span><span class="token operator">/</span>FORTRAN语言）实现的<span class="token keyword">new</span><span class="token operator">:</span>用来创建新实例对象<span class="token keyword">package</span><span class="token operator">:</span>包<span class="token keyword">private</span><span class="token operator">:</span>一种访问控制方式：私用模式<span class="token keyword">protected</span><span class="token operator">:</span>一种访问控制方式：保护模式<span class="token keyword">public</span><span class="token operator">:</span>一种访问控制方式：共用模式<span class="token keyword">return</span><span class="token operator">:</span>从成员方法中返回数据<span class="token keyword">short</span><span class="token operator">:</span>基本数据类型之一<span class="token punctuation">,</span>短整数类型<span class="token keyword">static</span><span class="token operator">:</span>表明具有静态属性<span class="token keyword">strictfp</span><span class="token operator">:</span>用来声明FP_strict（单精度或双精度浮点数）表达式遵循IEEE <span class="token number">754</span>算术规范<span class="token keyword">super</span><span class="token operator">:</span>表明当前对象的父类型的引用或者父类型的构造方法<span class="token keyword">switch</span><span class="token operator">:</span>分支语句结构的引导词<span class="token keyword">synchronized</span><span class="token operator">:</span>表明一段代码需要同步执行<span class="token keyword">this</span><span class="token operator">:</span>指向当前实例对象的引用<span class="token keyword">throw</span><span class="token operator">:</span>抛出一个异常<span class="token keyword">throws</span><span class="token operator">:</span>声明在当前定义的成员方法中所有需要抛出的异常<span class="token keyword">transient</span><span class="token operator">:</span>声明不用序列化的成员域<span class="token keyword">try</span><span class="token operator">:</span>尝试一个可能抛出异常的程序块<span class="token keyword">void</span><span class="token operator">:</span>声明当前成员方法没有返回值<span class="token keyword">volatile</span><span class="token operator">:</span>表明两个或者多个变量必须同步地发生变化<span class="token keyword">while</span><span class="token operator">:</span>用在循环结构中</code></pre><h2 id="Java-基础-03-数据类型"><a href="#Java-基础-03-数据类型" class="headerlink" title="Java 基础 03_数据类型"></a>Java 基础 03_数据类型</h2><p>强类型语言</p><p>要求变量使用严格符合规定，变量使用必须先定义。</p><p>Java 数据类型分为两大类</p><ul><li><p>基本类型</p><ol><li><p>数值类型</p><ul><li><p>整数类型</p><ol><li>byte 占 1 个字节范围:-128-127</li><li>short 占 2 个字节:-32768-32767</li><li>int 占 4 个字节范围：-2147483648-2147483647</li><li>long 占 8 个字节范围：-922337206854775808-922337206854775808</li></ol><ul><li><p>浮点类型</p><pre><code> 1.  float占4个字节 2.  double占8个字节</code></pre></li><li><p>字符串类型 char 占 2 个字节</p></li></ul></li><li><p>boolean 类型：占 1 位其值只有 true 和 false 两个</p></li></ul></li></ol></li><li><p>引用类型</p><pre><code>     1. 类     2. 接口     3. 数组</code></pre></li></ul><p>···</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//八大基本数据类型</span>        <span class="token comment" spellcheck="true">//整数</span>        <span class="token keyword">byte</span> num1<span class="token operator">=</span><span class="token number">127</span><span class="token punctuation">;</span>        <span class="token keyword">short</span> num2<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num3<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//最常用</span>        <span class="token keyword">long</span> num4<span class="token operator">=</span>30L<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//Long类型要在数字后面加个l</span>        <span class="token comment" spellcheck="true">//小数  浮点数</span>        <span class="token keyword">float</span> num5<span class="token operator">=</span><span class="token number">50.1f</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//float类型要在数字后面加f</span>        <span class="token keyword">double</span> num6<span class="token operator">=</span><span class="token number">3.155455</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//字符</span>        <span class="token keyword">char</span> name<span class="token operator">=</span><span class="token string">'a'</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//字符串，String不是关键字，类</span>        <span class="token comment" spellcheck="true">//String name="呵呵";</span>        <span class="token comment" spellcheck="true">//布尔值:是非</span>        <span class="token keyword">boolean</span> flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// boolean flag=false;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Java-基础-04-数据类型拓展"><a href="#Java-基础-04-数据类型拓展" class="headerlink" title="Java 基础 04_数据类型拓展"></a>Java 基础 04_数据类型拓展</h2><pre><code></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//整数拓展   进制  二进制 0b 十进制 八进制0  十六进制0x</span>        <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i2<span class="token operator">=</span><span class="token number">010</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//八进制</span>        <span class="token keyword">int</span> i3<span class="token operator">=</span><span class="token number">0x10</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//十六进制  A-F</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//10</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//8</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i3<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//16</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=============================================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//浮点数扩展  银行业务的表示  钱￥</span>        <span class="token comment" spellcheck="true">//float  有限  离散 舍入误差  大约 接近但不等于</span>        <span class="token comment" spellcheck="true">// double</span>        <span class="token comment" spellcheck="true">//最好完全使用浮点数进行比较 //最好完全使用浮点数进行比较//最好完全使用浮点数进行比较</span>        <span class="token comment" spellcheck="true">//BigDecimal  数学工具类  用这个</span>        <span class="token keyword">float</span> f<span class="token operator">=</span><span class="token number">0.1f</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//0.1</span>        <span class="token keyword">double</span> d<span class="token operator">=</span><span class="token number">1.0</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//0.1</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>f<span class="token operator">==</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//false</span>        <span class="token keyword">float</span> d1<span class="token operator">=</span><span class="token number">232322323f</span><span class="token punctuation">;</span>        <span class="token keyword">float</span> d2<span class="token operator">=</span>d1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d1<span class="token operator">==</span>d2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//字符拓展</span>        <span class="token comment" spellcheck="true">//字符强制转换输出数字</span>        <span class="token keyword">char</span> c1<span class="token operator">=</span><span class="token string">'a'</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> c1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> c3<span class="token operator">=</span><span class="token string">'\u0061'</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//转义字符</span>        <span class="token comment" spellcheck="true">//\t制表符 空格</span>        <span class="token comment" spellcheck="true">//\n换行</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello\tWorld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello\nWorld"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=============================================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String sa<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String sb<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sa<span class="token operator">==</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false 内存地址不同</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sa<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true 内容相等</span>        String sc<span class="token operator">=</span><span class="token string">"Hello World"</span><span class="token punctuation">;</span>        String sd<span class="token operator">=</span><span class="token string">"Hello World"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sc<span class="token operator">==</span>sd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sc<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>sd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Java-基础-05-类型转换"><a href="#Java-基础-05-类型转换" class="headerlink" title="Java 基础 05_类型转换"></a>Java 基础 05_类型转换</h2><blockquote><p>由于 Java 是强类型语言所以要进行有些运算的时候需要用到类型转换！</p></blockquote><p>低——————————–&gt;高</p><p>byte,shortchar-&gt;int-&gt;long-&gt;float-&gt;double</p><pre><code></code></pre><pre class=" language-Java"><code class="language-Java">public class Demo2 {    public static void main(String[] args) {        int i=127;        byte b=(byte)i; //内存溢出        //强制类型转换  (类型)变量名  高->低        //自动转换 低-->高        System.out.println(i);        System.out.println(b);        /*         1.不能对布尔值进行转换         2.不能把对象类型转换为不相干类型         3.在把高容量转低容量的时候，强制转换         4.转换的时候可能存在内存溢出，或者精度问题        */        System.out.println((int)23.7);   //23        System.out.println((int)-45.89f); //-45        char c='a';        int d=c+1;        System.out.println(d);        System.out.println((char)d);        //操作比较大的数注意溢出        int money=10_0000_0000;        int years=20;        long total=money*(long)years;        System.out.println(money);        System.out.println(total);        //long 尽量用大写L 表示    }}</code></pre><h2 id="Java-基础-06-变量、常量、作用域"><a href="#Java-基础-06-变量、常量、作用域" class="headerlink" title="Java 基础 06_变量、常量、作用域"></a>Java 基础 06_变量、常量、作用域</h2><p>变量：</p><ul><li>合理规范</li><li>分号结尾</li><li>必须含有类型</li></ul><pre class=" language-Java"><code class="language-Java">public class Demo3 {    //属性:变量    static  int number=0;  //类变量    String str =" china";  //实例变量  从属于对象  如果部自行初始化，默认值一般位0    //布尔值 ：默认是false    //其他方法    public void method() {       int i=0;  //局部变量：必须初始化值    }    public static void main(String[] args) {        int i=0;  //局部变量：必须初始化值        //变量类型 变量名字=new Demo3();       Demo3 demo3= new Demo3();        demo3.str="ds";        System.out.println(demo3.str);    }}</code></pre><p>常量：初始化之后不能再改变</p><p>变量命名规范：</p><ul><li>所有变量、方法、类名：==见名知意==</li><li>类成员变量：驼峰原则：monthSalary,出第一个单词以外，后面单词首字母大写</li><li>局部变量：首字母小写驼峰原则</li><li>常量：大写字母和下划线：MAX_VALUE</li><li>类名：首字母大写和驼峰原则 Man 、GoodMan</li><li>方法名：首字母小写和驼峰原则 run() runRun()</li></ul><h2 id="Java-基础-07-基本运算符"><a href="#Java-基础-07-基本运算符" class="headerlink" title="Java 基础 07_基本运算符"></a>Java 基础 07_基本运算符</h2><blockquote><p>Java 语言支持如下运算符：</p></blockquote><ul><li>算数运算符：+，-，*，/，%，++，–</li><li>赋值运算符：=</li><li>关系运算符：&gt;,&lt;,&gt;=,&lt;=,==,!=</li><li>逻辑运算符：&amp;&amp;,||,!</li><li>位运算符：&amp;，|,《,^,~,&gt;&gt;,&lt;&lt;,&gt;&gt;&gt;(了解)</li><li>条件运算符？：</li><li>扩展复制运算符：+=，-=。*=。/=</li></ul><h2 id="Java-基础-08-自增自减、Math-类"><a href="#Java-基础-08-自增自减、Math-类" class="headerlink" title="Java 基础 08_自增自减、Math 类"></a>Java 基础 08_自增自减、Math 类</h2><p>a++与++a 的区别，如果单独使用没有任何区别，如果在运算中就有区别了，a++是先运算在赋值，而++a 是先赋值再运算！！</p><h2 id="Java-基础-09-逻辑、位运算符"><a href="#Java-基础-09-逻辑、位运算符" class="headerlink" title="Java 基础 09_逻辑、位运算符"></a>Java 基础 09_逻辑、位运算符</h2><pre class=" language-Java"><code class="language-Java">package oprerator;public class Demo1 {    public static void main(String[] args) {     //逻辑运算符        //与  或  非        boolean a=true;        boolean b=false;        System.out.println("a&&b:"+(a&&b));  //false        System.out.println("a||b:"+(a||b));  //true        System.out.println("!(a&&b):"+!(a&&b)); //true        //短路运算        int c=5;        boolean d=(c<4)&&(c++<4); //&&后面不会执行        System.out.println(d); //false        System.out.println(c); //5        //位运算        /*         A   =0011 1100         B   =0000 1101         A&B =0000 1100   与 11为1 否则为0         A|B =0011 1101   或  有1得1         A^B =0011 0001   相同为0 不同为1         ~B  =1111 0010   与B取反         面试题 ：2*8怎样最快         解：2*2*2*2         0000 0000 0         0000 0001 1         0000 0010 2         0000 0011 3         0000 0100 4         0000 1000 8         0001 0000 16         位运算   << 左移变大 *2    >> 右移缩小  /2         **/        System.out.println(2<<3);// 左移3  =16    }}</code></pre><h2 id="Java-基础-10-三元运算符及小结"><a href="#Java-基础-10-三元运算符及小结" class="headerlink" title="Java 基础 10_三元运算符及小结"></a>Java 基础 10_三元运算符及小结</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> oprerator<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> a <span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>        a<span class="token operator">+=</span>b<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//a=a+b</span>        a<span class="token operator">-=</span>b<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//a=a-b;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//面试题 字符串连接符区别</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token operator">+</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//字符串在前面  会拼接  1020</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//字符穿在后面  会运算  30</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>三元运算符 必须掌握</p></blockquote><pre class=" language-Java"><code class="language-Java">      //三元运算符        int score=80;        String type=score<60?"不及格":"及格";        System.out.println(type); //及格</code></pre><blockquote><p>java 优先级口诀：单目乘除为关系，逻辑三目后赋值。</p></blockquote><p>单目：单目运算符+ –(负数) ++ – 等<br>乘除：算数单目运算符* / % + -<br>为：位移单目运算符&lt;&lt; &gt;&gt;<br>关系：关系单目运算符&gt; &lt; &gt;= &lt;= == !=<br>逻辑：逻辑单目运算符&amp;&amp; || &amp; | ^<br>三目：三目单目运算符 A &gt; B ? X : Y<br>后：无意义，仅仅为了凑字数<br>赋值：赋值=</p><h2 id="Java-基础-11-包机制"><a href="#Java-基础-11-包机制" class="headerlink" title="Java 基础 11_包机制"></a>Java 基础 11_包机制</h2><p>为了更好地组织类，Java 提供了包机制区别命名空间</p><pre class=" language-Java"><code class="language-Java">import com.baidu.*;</code></pre><h2 id="Java-基础-12-JavaDoc-生成文档"><a href="#Java-基础-12-JavaDoc-生成文档" class="headerlink" title="Java 基础 12_JavaDoc 生成文档"></a>Java 基础 12_JavaDoc 生成文档</h2><pre class=" language-JAVA"><code class="language-JAVA">/** * @Author 作者 * @Description //TODO  描述 * @Date 22:48 2021/8/30  时间 * @Param  参数名 * @return  返回值状况 * @throws  Exception 异常抛出情况 * @version  版本号 * **/</code></pre><ul><li>打开.java 文件 执行 doc 命令</li><li>编译成文档 可以查看</li></ul><pre class=" language-java"><code class="language-java">javadoc <span class="token operator">-</span>encoding UTF<span class="token operator">-</span><span class="token number">8</span> <span class="token operator">-</span>charset UTF<span class="token operator">-</span><span class="token number">8</span> sss<span class="token punctuation">.</span>java</code></pre><blockquote><p>使用 IDEA 生成 JavaDoc 文档！</p></blockquote><hr><pre class=" language-java"><code class="language-java"><span class="token operator">-</span>encoding UTF<span class="token operator">-</span>``<span class="token number">8</span>` `<span class="token operator">-</span>charset UTF<span class="token operator">-</span>``<span class="token number">8</span>` `<span class="token operator">-</span>windowtitle ``<span class="token string">"test"</span></code></pre><ul><li>Tools-&gt;Generate JavaDoc…</li><li>Selected files</li><li>Locale :zh_CN</li><li>Other command line arguments :-encoding UTF-<code>8` `-charset UTF-</code>8<code></code>-windowtitle ``”test”</li></ul><h4 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h4><blockquote><footer><strong>https://www.kuangstudy.com/</strong></footer></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
